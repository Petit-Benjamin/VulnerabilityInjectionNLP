from os.path import join
from pathlib import Path

import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

BASE_DIR = Path(__file__).parent
CSVS_DIR = join(BASE_DIR, 'csvs')
FIGS_DIR = join(BASE_DIR, 'figs')


def bar_plot_effectiveness():
    sns.set(font_scale=1.5)
    df = pd.read_csv(join(CSVS_DIR, "model_perf_above_100_tokens.csv"))
    HUE_ORDER = ['Mutated', 'Obfuscated', 'Raw']
    y_column = 'Percentage'
    split_by_column = 'Inferred code is'
    CATPLOT_ASPECT = 11.7 / 8.0  # aspect ration of the sub-figures

    vul_df = df.copy(True)
    vul_df[split_by_column] = 'Vulnerable'
    vul_df.rename(columns={'With vuln. Inserted': y_column}, inplace=True)

    comp_df = df.copy(True)
    comp_df[split_by_column] = 'Compilable'
    comp_df.rename(columns={'Compilable': y_column}, inplace=True)

    bplot_df = pd.concat([vul_df, comp_df], ignore_index=True)

    catplot = sns.catplot(
        data=bplot_df, x='Iteration', y=y_column, hue='Dataset', legend=False,
        col=split_by_column, kind='bar', col_wrap=1, palette="colorblind", hue_order=HUE_ORDER,
        aspect=CATPLOT_ASPECT
    )

    catplot.set_titles("{col_var} {col_name}")

    catplot.fig.get_axes()[1].set_xlabel(catplot.fig.get_axes()[1].get_xlabel(), labelpad=10)
    # hatches must equal the number of hues (3 in this case)
    hatches = ['///', '...', 'xxx']
    # iterate through each subplot / Facet
    for ax in catplot.fig.get_axes():
        ax.set_ylim(90, 100)
        # select the correct patches
        patches = [patch for patch in ax.patches]
        # the number of patches should be evenly divisible by the number of hatches
        x_num = (len(patches) // len(hatches))
        h = []
        for i, item in enumerate(hatches):
            h.extend([item for _ in range(x_num)])

        # iterate through the patches for each subplot
        for patch, hatch in zip(patches, h):
            patch.set_hatch(hatch)
            patch.set_edgecolor('k')

        l = ax.legend(loc='lower right')
        for lp, hatch in zip(l.get_patches(), hatches):
            lp.set_hatch(hatch)
            lp.set_edgecolor('k')

    plt.savefig(join(FIGS_DIR, 'fig_3.pdf'))
    plt.clf()


def box_plot_levenshtein_distance():
    y_column = "Levenshtein distance"
    x_column = 'Dataset'
    mut_x = 'Mut. (5 progs.)'
    obf_x = 'Obf. (27 progs.)'
    raw_x = 'Raw (13 progs.)'
    x_order = [mut_x, obf_x, raw_x]

    sns.set(font_scale=1.2)

    normal_csv = pd.read_csv(join(CSVS_DIR, "normal_dataset.csv"))
    normal_csv[x_column] = raw_x
    obf_csv = pd.read_csv(join(CSVS_DIR, "obfuscated_dataset_v2.csv"))
    obf_csv[x_column] = obf_x
    mutants_csv = pd.read_csv(join(CSVS_DIR, "mutants_dataset.csv"))
    mutants_csv[x_column] = mut_x

    df = pd.concat([normal_csv, obf_csv, mutants_csv], ignore_index=True)
    df.rename(columns={'lev_dist': y_column}, inplace=True)
    sns.boxplot(data=df, x=x_column, y=y_column, order=x_order, palette="colorblind")
    plt.savefig(join(FIGS_DIR, 'fig_4.pdf'))
    plt.clf()


if __name__ == '__main__':
    box_plot_levenshtein_distance()
    bar_plot_effectiveness()
